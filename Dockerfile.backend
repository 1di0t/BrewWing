# syntax=docker/dockerfile:1.3
FROM python:3.10-slim

# set directory to /app
WORKDIR /app

# system dependencies
RUN apt-get update && apt-get install -y \
    git \
    && rm -rf /var/lib/apt/lists/*

# Accept build arguments
ARG HF_API_KEY
ARG DJANGO_SECRET_KEY

# Print raw variables for debugging
RUN echo "Raw HF_API_KEY: $HF_API_KEY"
RUN echo "Raw DJANGO_SECRET_KEY: $DJANGO_SECRET_KEY"

# Extract actual token from potential variable format
RUN if [ ! -z "$HF_API_KEY" ]; then \
        # Remove $$ if present (Cloud Build issue)
        ACTUAL_HF_KEY=$(echo "$HF_API_KEY" | sed 's/^\$\$//' | sed 's/^\$//' | sed 's/^HF_API_KEY=//' | sed 's/^hf_api_key=//i'); \
        echo "Extracted HF_API_KEY: $ACTUAL_HF_KEY"; \
        export HF_API_KEY="$ACTUAL_HF_KEY"; \
    fi

# Verify build arguments
RUN echo "Verifying build arguments..." && \
    if [ -z "$HF_API_KEY" ]; then \
        echo "HF_API_KEY is not set" && exit 1; \
    else \
        echo "HF_API_KEY is set (length: ${#HF_API_KEY})"; \
        echo "HF_API_KEY starts with: $(echo $HF_API_KEY | cut -c1-4)"; \
        if ! echo "$HF_API_KEY" | grep -q "^hf_"; then \
            echo "ERROR: HF_API_KEY must start with 'hf_', got: $HF_API_KEY" && exit 1; \
        fi; \
    fi && \
    if [ -z "$DJANGO_SECRET_KEY" ]; then \
        echo "DJANGO_SECRET_KEY is not set" && exit 1; \
    else \
        echo "DJANGO_SECRET_KEY is set"; \
    fi

# Set environment variables with quotes to preserve values
ENV HUGGINGFACE_API_KEY="$HF_API_KEY" \
    HUGGINGFACE_HUB_TOKEN="$HF_API_KEY" \
    HF_HUB_TOKEN="$HF_API_KEY" \
    HF_HOME=/app/huggingface_cache \
    TRANSFORMERS_CACHE=/app/huggingface_cache \
    HF_HUB_CACHE=/app/huggingface_cache \
    SENTENCE_TRANSFORMERS_HOME=/app/huggingface_cache \
    DJANGO_SECRET_KEY="$DJANGO_SECRET_KEY"

ENV DJANGO_SETTINGS_MODULE=brewing.settings \
    PORT=8080 \
    PYTHONTRACEMALLOC=10

# model cache directory
RUN mkdir -p /app/huggingface_cache && \
    chmod -R 777 /app/huggingface_cache

# Copy and install requirements first for better caching
COPY requirements.txt .
RUN pip install --upgrade pip && \
    pip install -r requirements.txt && \
    pip install --no-cache-dir sentence-transformers

# copy project files
COPY . .

# run the download_model.py script to download the model files
RUN python download_model.py

# copy the faiss index and build_faiss.py script
COPY build_faiss.py .
COPY brewing/data data/   

# run the build_faiss.py script to build the faiss index
RUN python build_faiss.py

# move the faiss index
RUN mv faiss_store /app/brewing/faiss_store

WORKDIR /app/brewing

# Verify environment variables are set correctly
RUN echo "Verifying environment variables..." && \
    if [ "$HUGGINGFACE_API_KEY" != "$HF_API_KEY" ]; then \
        echo "HUGGINGFACE_API_KEY not set correctly" && exit 1; \
    fi && \
    if [ "$HUGGINGFACE_HUB_TOKEN" != "$HF_API_KEY" ]; then \
        echo "HUGGINGFACE_HUB_TOKEN not set correctly" && exit 1; \
    fi && \
    if [ "$HF_HUB_TOKEN" != "$HF_API_KEY" ]; then \
        echo "HF_HUB_TOKEN not set correctly" && exit 1; \
    fi

# expose port 8080 for the server
EXPOSE 8080

# start the server using gunicorn
CMD ["sh", "-c", "exec gunicorn brewing.wsgi:application --bind 0.0.0.0:${PORT:-8080} --workers 1 --timeout 1200 --capture-output --log-level debug"]



